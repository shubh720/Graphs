#include <bits/stdc++.h>
using namespace std;

void floyd_warshall(int V,vector<vector<int>> adj){
    // step1. distance declaration
    int dist[V+1][V+1];
    for(int i=1; i<=V; i++){
        for(int j=1; j<=V; j++){
            if(i == j) dist[i][j] = 0;
            else dist[i][j] = INT_MAX;
        }
    }

    for(int i=0; i<adj.size(); i++){
        int u = adj[i][0];
        int v = adj[i][1];
        int wt = adj[i][2];

        dist[u][v] = wt;
    }

    // step2. take 1 intermediate phase and iterate over it 
    for(int phase=1; phase<=V; phase++){
       for(int i=1; i<=V; i++){
            for(int j=1; j<=V; j++){
                
                int u = dist[i][phase];
                int v = dist[phase][j];

                if(u == INT_MAX || v == INT_MAX)
                    continue;
                
                // hence some possiblity min(already present,new obtained)
                dist[i][j] = min(dist[i][j],u+v); 
                
            }
        }
    }
    
    for(int i=1; i<=V; i++){
        for(int j=1; j<=V; j++){
            cout << dist[i][j] << " ";
        }
        cout << endl;
    }
 return;
}


int main(){

    int V,E;
    cin >> V >> E;

    vector<vector<int>> adj;
    for(int i=0; i<E; i++){
        int s,d,wt;
        cin >> s >> d >> wt;

        adj.push_back({s,d,wt});
    }

    floyd_warshall(V,adj);

    return 0;
}
